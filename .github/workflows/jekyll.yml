# File: .github/workflows/deploy-pages.yml

name: “Build and Deploy Jekyll with Mermaid”

on:
  push:
    branches:
      - main   # whenever you push to main, rebuild & deploy

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Check out your repository
      - name: “Checkout repository”
        uses: actions/checkout@v3

      # 2) Set up Ruby (choose the version you need; GitHub Pages uses 2.7.x by default)
      - name: “Set up Ruby”
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7

      # 3) Install Bundler, then your Gemfile’s dependencies
      - name: “Install dependencies”
        run: |
          gem install bundler
          bundle install --jobs 4 --retry 3

      # 4) Run the actual Jekyll build (which will load jekyll-diagrams and process <mermaid>)
      - name: “Build site with Jekyll”
        run: bundle exec jekyll build --destination public

      # 5) Deploy the built site (`public/`) to GitHub Pages via the actions‑gh‑pages action
      - name: “Deploy to GitHub Pages”
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
          publish_branch: gh-pages    # or "main" if you want to publish from main/docs/
          # If you’d rather publish into main:/docs, you could do:
          # publish_branch: main
          # publish_dir: ./public
          # publish_dir: ./public# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        # https://github.com/ruby/setup-ruby/releases/tag/v1.207.0
        uses: ruby/setup-ruby@4a9ddd6f338a97768b8006bf671dfbad383215f4
        with:
          ruby-version: '3.1' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
